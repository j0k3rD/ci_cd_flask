name: GitHub Actions Flask-HelloWorld

env:
  REPO_NAME: ${{ github.event.repository.name }}
  IMAGE_VERSION: ${{ github.sha }}
  OTEL_SERVICE_NAME: flaskapp-monitor

on:
  push:
    tags: ['v*.*.*']

permissions:
  id-token: write
  contents: read

jobs:

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  push:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    outputs:
      should_build: ${{ steps.check_commit.outputs.should_build }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: 'Get tag'
        id: tag
        uses: dawidd6/action-get-tag@v1.1.0
    
      - name: 'Check Commit Message'
        id: check_commit
        run: |
          echo ::set-output name=should_build::$(if [[ "${{ github.event.head_commit.message }}" == *"deploy"* || "${{ github.event.head_commit.message }}" == *"build"* ]]; then echo "true"; else echo "false"; fi)
    
      - run: |
          if [[ "${{ steps.check_commit.outputs.should_build }}" == "false" ]]; then
            echo "Commit message does not contain 'deploy' or 'build'."
            echo "Skipping build and deploy steps."
            exit 0
          fi
        if: steps.check_commit.outputs.should_build == 'false'

  build:
    runs-on: ubuntu-latest
    needs: push
    outputs:
      should_build: ${{ steps.check_commit_build.outputs.should_build }}
    if: ${{ needs.push.outputs.should_build == 'true' }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: 'Get tag'
        id: tag
        uses: dawidd6/action-get-tag@v1.1.0     

      - name: 'Check Commit Message'
        id: check_commit_build
        run: |
          echo ::set-output name=should_build::$(if [[ "${{ github.event.head_commit.message }}" == *"deploy"* ]]; then echo "true"; elif [[ "${{ github.event.head_commit.message }}" == *"build"* ]]; then echo "false"; fi)

      - name: Docker login
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.ACR_NAME }}.azurecr.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
          ecr: 'false'
          logout: 'true'
        
      - run: |
          if [[ "${{ steps.check_commit_build.outputs.should_build }}" == "false" ]] || [[ "${{ steps.check_commit_build.outputs.should_build }}" == "true" ]]; then
            docker build . -t ${{ secrets.ACR_NAME }}.azurecr.io/helloflask:${{ steps.tag.outputs.tag }}
            docker push ${{ secrets.ACR_NAME }}.azurecr.io/helloflask:${{ steps.tag.outputs.tag }}
          fi
        if: steps.check_commit_build.outputs.should_build == 'true' || steps.check_commit_build.outputs.should_build == 'false'
        
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ needs.build.outputs.should_build == 'true' }}
    defaults:
      run:
        shell: bash
    steps:
      - name: 'Check Commit Message'
        id: check_commit_deploy
        run: |
          echo ::set-output name=should_deploy::$(if [[ "${{ github.event.head_commit.message }}" == *"deploy"* ]]; then echo "true"; else echo "false"; fi)

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
        if: steps.check_commit_deploy.outputs.should_deploy == 'true'

      - name: 'Get tag'
        id: tag
        uses: dawidd6/action-get-tag@v1.1.0

      - name: 'Deploy Container Instance'
        uses: azure/aci-deploy@v1
        with:
          location: ${{ secrets.LOCATION }}
          name: helloflask
          resource-group: ${{ secrets.RESOURCE_GROUP }}
          image: ${{ secrets.ACR_NAME }}.azurecr.io/helloflask:${{ steps.tag.outputs.tag }}
          dns-name-label: helloflasksp-${{ github.run_id }}-${{ github.run_attempt }}
          registry-username: ${{ secrets.REGISTRY_USERNAME }}
          registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          ports: 5000
          cpu: 1
          memory: 1
          environment-variables: OTEL_SERVICE_NAME= ${{ env.OTEL_SERVICE_NAME }}
          # secure-environment-variables: CONNECTION_STRING= ${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}

        if: steps.check_commit_deploy.outputs.should_deploy == 'true'

      - name: 'Logout'
        run: |
          az logout
        if: steps.check_commit_deploy.outputs.should_deploy == 'true'